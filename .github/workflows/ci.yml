name: Vortex AI Engine CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # PHP Linting and Syntax Check
  php-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis
          
      - name: Install dependencies
        run: |
          composer install --no-dev --optimize-autoloader
          
      - name: PHP Syntax Check
        run: |
          find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
          
      - name: PHP CodeSniffer
        run: |
          composer require --dev squizlabs/php_codesniffer
          ./vendor/bin/phpcs --standard=PSR12 --extensions=php --ignore=vendor/ .

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: php-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis
          
      - name: Install dependencies
        run: |
          composer install
          
      - name: Run unit tests
        run: |
          ./vendor/bin/phpunit --testdox
        env:
          WP_TESTS_DIR: /tmp/wordpress-tests-lib
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results/

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    needs: php-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          
      - name: Install dependencies
        run: |
          composer install --no-dev
          
      - name: Run security audit
        run: |
          composer audit --format=json > security-audit.json
          
      - name: Upload security audit
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: security-audit.json

  # Comprehensive Recursive Audit
  recursive-audit:
    runs-on: ubuntu-latest
    needs: php-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis
          
      - name: Run comprehensive audit
        run: |
          php scripts/comprehensive-recursive-audit.php --full --output=AUDIT-REPORT.md
          
      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: audit-report
          path: AUDIT-REPORT.md

  # Environment Verification
  env-verification:
    runs-on: ubuntu-latest
    needs: php-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis
          
      - name: Setup WordPress test environment
        run: |
          bash bin/install-wp-tests.sh wordpress_test root '' localhost latest
          
      - name: Run environment verification
        run: |
          php deployment/verify-environment.php
          
      - name: Upload verification results
        uses: actions/upload-artifact@v3
        with:
          name: env-verification
          path: verification-results.txt

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [php-lint, unit-tests, security-audit, recursive-audit, env-verification]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          
      - name: Create plugin package
        run: |
          # Remove development files
          rm -rf .git .github scripts tests vendor composer.*
          
          # Create zip file
          zip -r vortex-ai-engine.zip . -x "*.git*" "*.github*" "scripts/*" "tests/*" "vendor/*" "composer.*"
          
      - name: Upload plugin package
        uses: actions/upload-artifact@v3
        with:
          name: vortex-ai-engine
          path: vortex-ai-engine.zip

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Download plugin package
        uses: actions/download-artifact@v3
        with:
          name: vortex-ai-engine
          
      - name: Deploy to staging
        run: |
          # Add your staging deployment commands here
          echo "Deploying to staging environment..."
          # Example: rsync, FTP, or cloud deployment
          
      - name: Run smoke tests on staging
        run: |
          # Run smoke tests against staging environment
          curl -X POST ${{ secrets.STAGING_URL }}/wp-json/vortex/v1/health-check
          
      - name: Notify staging deployment
        if: always()
        run: |
          echo "Staging deployment completed"
          # Add notification logic (Slack, email, etc.)

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Download plugin package
        uses: actions/download-artifact@v3
        with:
          name: vortex-ai-engine
          
      - name: Deploy to production
        run: |
          # Add your production deployment commands here
          echo "Deploying to production environment..."
          # Example: rsync, FTP, or cloud deployment
          
      - name: Run smoke tests on production
        run: |
          # Run smoke tests against production environment
          curl -X POST ${{ secrets.PRODUCTION_URL }}/wp-json/vortex/v1/health-check
          
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Vortex AI Engine v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline
            
            ## Changes
            - Automated deployment from main branch
            - All tests passed
            - Security audit completed
            - Environment verification successful
            
            ## Installation
            1. Download the plugin package
            2. Upload to WordPress plugins directory
            3. Activate the plugin
            4. Configure AWS credentials
            5. Run smoke tests
          draft: false
          prerelease: false
          
      - name: Notify production deployment
        if: always()
        run: |
          echo "Production deployment completed"
          # Add notification logic (Slack, email, etc.)

  # Daily Health Check
  daily-health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          
      - name: Run health checks
        run: |
          # Check staging environment
          curl -f ${{ secrets.STAGING_URL }}/wp-json/vortex/v1/health-check || echo "Staging health check failed"
          
          # Check production environment
          curl -f ${{ secrets.PRODUCTION_URL }}/wp-json/vortex/v1/health-check || echo "Production health check failed"
          
      - name: Generate health report
        run: |
          echo "Daily health check completed at $(date)" > health-report.txt
          
      - name: Upload health report
        uses: actions/upload-artifact@v3
        with:
          name: daily-health-report
          path: health-report.txt

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [php-lint, unit-tests, security-audit, recursive-audit, env-verification]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "CI/CD pipeline failed!"
          # Add notification logic for failures
          
      - name: Notify on success
        if: success()
        run: |
          echo "CI/CD pipeline completed successfully!"
          # Add notification logic for success 