# =============================================================================
# VORTEX AI Engine - Terraform Backend Configuration
# =============================================================================

# Note: This file is dynamically generated by GitHub Actions
# based on the environment (dev/staging/prod)

# Example backend configuration for production:
# terraform {
#   backend "s3" {
#     bucket         = "vortex-terraform-state-prod"
#     key            = "vortex-ai-engine/terraform.tfstate"
#     region         = "us-east-1"
#     encrypt        = true
#     dynamodb_table = "vortex-terraform-locks"
#   }
# }

# =============================================================================
# Backend Setup Instructions
# =============================================================================

# To initialize the backend, run the following AWS CLI commands:
#
# 1. Create S3 bucket for state storage:
#    aws s3 mb s3://vortex-terraform-state-prod --region us-east-1
#    aws s3api put-bucket-versioning \
#      --bucket vortex-terraform-state-prod \
#      --versioning-configuration Status=Enabled
#    aws s3api put-bucket-encryption \
#      --bucket vortex-terraform-state-prod \
#      --server-side-encryption-configuration '{
#        "Rules": [
#          {
#            "ApplyServerSideEncryptionByDefault": {
#              "SSEAlgorithm": "AES256"
#            }
#          }
#        ]
#      }'
#
# 2. Create DynamoDB table for state locking:
#    aws dynamodb create-table \
#      --table-name vortex-terraform-locks \
#      --attribute-definitions AttributeName=LockID,AttributeType=S \
#      --key-schema AttributeName=LockID,KeyType=HASH \
#      --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
#      --region us-east-1
#
# 3. Configure bucket policy for security:
#    aws s3api put-bucket-policy \
#      --bucket vortex-terraform-state-prod \
#      --policy '{
#        "Version": "2012-10-17",
#        "Statement": [
#          {
#            "Sid": "DenyInsecureConnections",
#            "Effect": "Deny",
#            "Principal": "*",
#            "Action": "s3:*",
#            "Resource": [
#              "arn:aws:s3:::vortex-terraform-state-prod",
#              "arn:aws:s3:::vortex-terraform-state-prod/*"
#            ],
#            "Condition": {
#              "Bool": {
#                "aws:SecureTransport": "false"
#              }
#            }
#          }
#        ]
#      }'

# =============================================================================
# Environment-Specific Backend Configuration
# =============================================================================

# The GitHub Actions workflow will dynamically create backend.tf with:
# - Environment-specific bucket names
# - Proper encryption and versioning
# - DynamoDB table for locking
# - Regional configuration

# Example for different environments:
# - dev: s3://vortex-terraform-state-dev
# - staging: s3://vortex-terraform-state-staging  
# - prod: s3://vortex-terraform-state-prod 