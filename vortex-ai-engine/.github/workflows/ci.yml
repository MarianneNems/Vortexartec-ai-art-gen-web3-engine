name: VORTEX AI Engine CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, json, curl, openssl
        
    - name: Setup WordPress test environment
      run: |
        # Download WordPress
        wget https://wordpress.org/latest.zip
        unzip latest.zip
        mv wordpress/* .
        rm -rf wordpress latest.zip
        
        # Create wp-config.php for testing
        cp wp-config-sample.php wp-config.php
        sed -i 's/database_name_here/vortex_test/g' wp-config.php
        sed -i 's/username_here/root/g' wp-config.php
        sed -i 's/password_here//g' wp-config.php
        sed -i 's/localhost/127.0.0.1/g' wp-config.php
        
        # Create wp-salt.php
        echo "<?php" > wp-salt.php
        echo "define('AUTH_KEY',         'test');" >> wp-salt.php
        echo "define('SECURE_AUTH_KEY',  'test');" >> wp-salt.php
        echo "define('LOGGED_IN_KEY',    'test');" >> wp-salt.php
        echo "define('NONCE_KEY',        'test');" >> wp-salt.php
        echo "define('AUTH_SALT',        'test');" >> wp-salt.php
        echo "define('SECURE_AUTH_SALT', 'test');" >> wp-salt.php
        echo "define('LOGGED_IN_SALT',   'test');" >> wp-salt.php
        echo "define('NONCE_SALT',       'test');" >> wp-salt.php
        
    - name: Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader
        
    - name: Run PHP syntax check
      run: |
        find . -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" -exec php -l {} \;
        
    - name: Run comprehensive system tests
      run: |
        php comprehensive-system-tests.php
        
    - name: Test plugin activation
      run: |
        # Simulate WordPress environment
        export ABSPATH=$(pwd)/
        php -r "
        require_once 'wp-config.php';
        require_once 'wp-settings.php';
        require_once 'vortex-ai-engine/vortex-ai-engine.php';
        echo 'Plugin loaded successfully\n';
        "
        
    - name: Check file structure
      run: |
        # Verify required directories exist
        test -d vortex-ai-engine/admin && echo "‚úÖ Admin directory exists"
        test -d vortex-ai-engine/includes && echo "‚úÖ Includes directory exists"
        test -d vortex-ai-engine/public && echo "‚úÖ Public directory exists"
        test -d vortex-ai-engine/contracts && echo "‚úÖ Contracts directory exists"
        test -d vortex-ai-engine/audit-system && echo "‚úÖ Audit system directory exists"
        
    - name: Security check
      run: |
        # Check for ABSPATH guards
        grep -r "if (!defined('ABSPATH'))" vortex-ai-engine/ --include="*.php" | wc -l
        
    - name: Documentation check
      run: |
        # Verify documentation exists
        test -f vortex-ai-engine/README.md && echo "‚úÖ README.md exists"
        test -f vortex-ai-engine/readme.txt && echo "‚úÖ readme.txt exists"
        
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # Basic security checks
        echo "üîí Running security checks..."
        
        # Check for sensitive files
        if find . -name "wp-config.php" -o -name "*.env" -o -name "*.key" -o -name "*.pem"; then
          echo "‚ùå Sensitive files found in repository"
          exit 1
        else
          echo "‚úÖ No sensitive files found"
        fi
        
        # Check for hardcoded credentials
        if grep -r "password\|secret\|key" . --include="*.php" | grep -v "//\|#" | grep -v "define\|const"; then
          echo "‚ö†Ô∏è Potential hardcoded credentials found"
        else
          echo "‚úÖ No obvious hardcoded credentials"
        fi
        
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create plugin package
      run: |
        # Create plugin zip file
        cd vortex-ai-engine
        zip -r ../vortex-ai-engine.zip . -x "*.git*" "node_modules/*" "vendor/*" "*.log" "*.tmp"
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: vortex-ai-engine-plugin
        path: vortex-ai-engine.zip
        
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: vortex-ai-engine-plugin
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: vortex-ai-engine.zip
        tag_name: v${{ github.run_number }}
        name: VORTEX AI Engine v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          Changes in this release:
          - Automated build and test
          - Comprehensive system validation
          - Security checks passed
          
          Download the plugin zip file above for installation.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 